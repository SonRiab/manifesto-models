/*
 * SPDX short identifier: MIT
 *
 * MIT License
 *
 * Copyright (c) 2018 Rene Jablonski
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package de.vnull.manifestoproject.model;

import lombok.Data;

import javax.persistence.*;
import java.util.List;
import java.util.Locale;

@Entity
@Data
public class Manifesto {

    @Id
    @GeneratedValue
    private Long id;

    /**
     * Link to the party defined by the "party_id" value used by the Manifesto Project.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    private Party party;

    /**
     * Link to the annotated text of the manifest.
     */
    @OneToMany(fetch = FetchType.LAZY)
    private List<AnnotatedText> annotatedText;

    /**
     * Link to the manifesto defined by the "is_copy_of" value used by the Manifesto Project.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    private Manifesto copyOf;

    /**
     * Store the "manifesto_id" value used by the Manifesto Project.
     * The manifesto id is generated by concatenating the {@link Party#id} and the {@link Manifesto#electionDate} using
     * an underscore to separate them. (ex.: 41113_199809)
     */
    private String manifestoId;

    /**
     * Store the "title" value used by the Manifesto Project.
     */
    private String title;

    /**
     * Store the "election_date" value used by the Manifesto Project. (format: yyyyMM)
     */
    private String electionDate;

    /**
     * Store the "source" value used by the Manifesto Project.
     * Discussion: use a string or add another entity?
     */
    private String source;

    /**
     * Store the "md5sum_text" value used by the Manifesto Project.
     */
    private String md5sumText;

    /**
     * Store the "url_original" value used by the Manifesto Project.
     */
    private String url;

    /**
     * Store the "md5sum_original" value used by the Manifesto Project.
     */
    private String md5sumOriginal;

    /**
     * Store the "handbook" value used by the Manifesto Project.
     * Discussion: I'm not sure what this value indicates so I've added this value as provided by the API.
     */
    private String handbook;

    /**
     * Store the "language" value used by the Manifesto Project.
     */
    private Locale locale;

    /**
     * Store the "annotations" value used by the Manifesto Project.
     */
    private Boolean annotated;

    /**
     * Store the "is_primary_doc" value used by the Manifesto Project.
     */
    private Boolean primaryDocument;

    /**
     * Store the "may_contradict_core_dataset" value used by the Manifesto Project.
     */
    private Boolean mayContradictCoreDataset;

    /**
     * Store the "has_eu_code" value used by the Manifesto Project
     */
    private Boolean hasEuCode;
}
